/*üëâ –ó–∞–≤–¥–∞–Ω–Ω—è 1:
‚Äî –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é getArea(number), —è–∫–∞ –æ–±—á–∏—Å–ª—é—î –ø–ª–æ—â—É –∫—Ä—É–≥–∞. –î–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Math. –í –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–æ–≥–æ —â–æ –ø–µ—Ä–µ–¥–∞–ª–∏ –≤ —Ñ—É–Ω–∫—Ü—ñ—é –º–∞—î –≤–∏–≤–æ–¥–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:
- –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–µ —á–∏—Å–ª–æ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ - –ü–ª–æ—â–∞ –¥–æ—Ä—ñ–≤–Ω—é—î —Å—Ç—ñ–ª—å–∫–∏ —Ç–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å.
- –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–ª–∏ –Ω–µ —á–∏—Å–ª–æ - –ü–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.
- –Ø–∫—â–æ –≤ —Ñ—É–Ω–∫—Ü—ñ—é –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ - –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ä–∞–¥—ñ—É—Å!
*/
let result;
let number = prompt("number");
function getArea() {
    return Math.pow(number, 2) * Math.PI;
}
result = getArea();
if (isFinite(number)) {
    alert(`–ü–ª–æ—â–∞ –¥–æ—Ä—ñ–≤–Ω—é—î ${result} –∫–≤–∞–¥—Ä–∞—Ç–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å`)
} else if (number == '') {
    alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ä–∞–¥—ñ—É—Å")
}
else {
    alert("–ü–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è")
}
getArea(number);
/*
üëâ –ó–∞–≤–¥–∞–Ω–Ω—è 2
‚Äî –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é getSqrt(number), —è–∫–∞ –≤–∏—Ä–∞—Ö–æ–≤—É—î –∫–æ—Ä—ñ–Ω—å –∫–≤–∞–¥—Ä–∞—Ç–Ω–∏–π. –î–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ—Ä–µ–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Math. –í –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–æ–≥–æ —â–æ –ø–µ—Ä–µ–¥–∞–ª–∏ –≤ —Ñ—É–Ω–∫—Ü—ñ—é –º–∞—î –≤–∏–≤–æ–¥–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:
- –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–µ —á–∏—Å–ª–æ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ - –ö–≤–∞–¥—Ä–∞—Ç–Ω–∏–π –∫–æ—Ä—ñ–Ω—å –∑ —Å—Ç—ñ–ª—å–∫–∏ —Ç–æ –¥–æ—Ä—ñ–≤–Ω—é—î —Å—Ç—ñ–ª—å–∫–∏ —Ç–æ.
- –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–ª–∏ –Ω–µ —á–∏—Å–ª–æ - –ü–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.
- –Ø–∫—â–æ —á–∏—Å–ª–æ –º–µ–Ω—à–µ 0 - –í–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—î —á–∏—Å–ª–æ.
- –Ø–∫—â–æ –≤ —Ñ—É–Ω–∫—Ü—ñ—é –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ - –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ!
*/
let res;
let number_1 = prompt("number")
function getSqrt(number_1) {
    return Math.sqrt(number_1)
}
res = getSqrt(number_1);
if ((isFinite(number_1)) > 0) {
    alert(`–ö–≤–∞–¥—Ä–∞—Ç–Ω–∏–π –∫–æ—Ä—ñ–Ω—å –∑ ${number_1} = ${res}`)
} else if ((isFinite(number_1)) < 0) {
    alert("–í–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—î —á–∏—Å–ª–æ");
}
else if (number_1 == "undefined") {
    alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ!");
}
else alert("–ü–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è");
getSqrt(number_1)
/*
üëâ –ó–∞–≤–¥–∞–Ω–Ω—è
‚Äî –°—Ç–≤–æ—Ä—ñ—Ç—å –æ–±‚Äô—î–∫—Ç MyMath —è–∫–∏–π –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤—É–≤–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª:
- MyMath.PI ‚Äì —Ü–µ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å —è–∫–∞ –º–∞—î –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —á–∏—Å–ª–æ Pi.
- MyMath.pow(number, degree) ‚Äì —Ü–µ –º–µ—Ç–æ–¥ —è–∫–∏–π –º–∞—î –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —á–∏—Å–ª–æ –≤ –ø–µ–≤–Ω—ñ–π —Å—Ç–µ–ø–µ–Ω—ñ.
- MyMath.abs(number) ‚Äì —Ü–µ –º–µ—Ç–æ–¥ —è–∫–∏–π –º–∞—î –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –º–æ–¥—É–ª—é —á–∏—Å–ª–∞.
- MyMath.max(number1, number2‚Ä¶) ‚Äì —Ü–µ –º–µ—Ç–æ–¥ —è–∫–∏–π –º–∞—î –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ —á–∏—Å–ª–æ –∑ –ø–µ—Ä–µ–¥–∞–Ω–∏—Ö. –ö—ñ–ª—å–∫—ñ—Å—Ç—å —á–∏—Å–µ–ª –Ω–µ–æ–±–º–µ–∂–µ–Ω–∞.
- MyMath.min(number1, number2‚Ä¶) ‚Äì —Ü–µ –º–µ—Ç–æ–¥ —è–∫–∏–π –º–∞—î –ø–æ–∞–µ—Ä–Ω—É—Ç–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ —á–∏—Å–ª–æ –∑ –ø–µ—Ä–µ–¥–∞–Ω–∏—Ö. –ö—ñ–ª—å–∫—ñ—Å—Ç—å —á–∏—Å–µ–ª –Ω–µ–æ–±–º–µ–∂–µ–Ω–∞.
–¢–∞–∫–æ–∂ –≤–∏ –º–∞—î—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ –º–µ—Ç–æ–¥—ñ–≤, —è–∫—â–æ:
- –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–ª–∏ –Ω–µ —á–∏—Å–ª–æ - –ü–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.
- –Ø–∫—â–æ –≤ —Ñ—É–Ω–∫—Ü—ñ—é –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ - –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –∞–±–æ —á–∏—Å–ª–∞(–≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –º–µ—Ç–æ–¥—É)!
–ü—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ü–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –æ–±‚Äô—î–∫—Ç—É Math –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–µ!
*/
let MyMath = {};
MyMath.PI = function PI() {
    console.log("PI: 3,14")
};
MyMath.pow = function (number_3, degree) {
    let result_2 = 1
    for (let i = 1; i <= degree; i++) {
        result_2 *= number_3;
    };
    console.log(result_2)
    if ((number_3.isNaN) || (degree.isNaN)) {
        console.log("–ü–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è")
    }
    else if ((number_3 == "undefined") || (degree == "undefined")) {
        console.log("–≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ")
    }
};
MyMath.abs = function abs(number_4) {
    let b;
    if (number_4 < 0) {
        b = -number_4;
    }
    if (number_4.isNaN) {
        console.log("–ü–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è")
    }
    else if (number_4 == "undefined") {
        console.log("–≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ")
    }
    else
        return b
};
MyMath.max = function f_1(...arguments) {
    let max = arguments[0];
    for (let i = 0; i < arguments.length; i++) {
        if (arguments[i] > max) {
            max = arguments[i]
        };
    };
    if (arguments.isNaN) {
        console.log("–ü–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è")
    }
    else if (arguments == "undefined") {
        console.log("–≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ªa")
    }
    else
        return max
};
MyMath.min = function f_2(...arguments) {
    let min = arguments[0];
    for (let i = 0; i < arguments.length; i++) {
        if (arguments[i] < min) {
            min = arguments[i]
        };
    };
    if (arguments.isNaN) {
        console.log("–ü–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è")
    }
    else if (arguments == "undefined") {
        console.log("–≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ªa")
    }
    else
        return min
};
console.log(MyMath);
console.log('PI:', MyMath.PI());
console.log('pow:', MyMath.pow(4, 2));
console.log('abs:', MyMath.abs(-6));
console.log('max:', MyMath.max(7, 10, 1, 9, 80));
console.log('min:', MyMath.min(7, 10, 1, 9, 80));


